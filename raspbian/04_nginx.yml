---
- name: nginx reverse proxy
  hosts: image
  remote_user: root
  become_user: root
  become: true

  vars:
    ansible_python_interpreter: /usr/bin/python3
    packages:
      ["certbot",
      "gzip",
      "nginx-full",
      "php8.2-fpm",
      "apache2-utils",
      "luarocks",
      "liblua5.1-dev",
      "git",
      "libnginx-mod-http-lua",
      "libssl-dev"
      ]

    build:
      ["git-core",
      "build-essential",
      "autoconf",
      "pkg-config",
      "cmake"]

  tasks:
  - name: Update release
    shell: apt-get update --allow-releaseinfo-change

  - name: Update Cache
    apt: update_cache=yes

  - name: easy_dir
    file:
      path: /etc/ssl/easy-rsa
      state: directory
      mode: 0755

  - name: Copy easyrsa
    unarchive:
      src: https://github.com/OpenVPN/easy-rsa/releases/download/v3.1.7/EasyRSA-3.1.7.tgz
      dest: /etc/ssl/easy-rsa
      remote_src: yes
      validate_certs: False
      extra_opts: [--strip-components=1]

  - name: Install Buildtools
    apt:
      name: "{{ item }}"
      state: latest
      update_cache: yes
      install_recommends: yes
    with_items: "{{ build }}"


  - name: install apt
    apt:
      name: "{{ item }}"
      state: latest
      install_recommends: no
    with_items: "{{ packages }}"

  - name: letsencrypt add
    blockinfile:
      path: /etc/nginx/snippets/letsencrypt.conf
      state: present
      create: yes
      block: |
        location ^~ /.well-known/acme-challenge/ {
         default_type "text/plain";
         root /var/www/letsencrypt;
        }

  - name: Create directory
    file:
      path: /var/www/letsencrypt/.well-known/acme-challenge
      state: directory
      owner: www-data
      group: www-data

  - name: copy_available
    copy:
      dest: /etc/nginx/sites-available/default
      src: configs/nginx_availablesites.conf
      owner: www-data
      group: www-data

  - name: copy_geoip2
    copy:
      dest: /etc/nginx/geolite2-country.mmdb
      src: configs/geolite2-country.mmdb
      owner: www-data
      group: www-data

  - name: headers
    copy:
      dest: /etc/nginx/headers.conf
      src: configs/nginx_headers.conf
      owner: www-data
      group: www-data

  - name: ticketkey
    shell: "openssl rand 48 > /etc/nginx/nginx_ticketkey"

  - name: proxyconf
    copy:
      dest: /etc/nginx/proxy_params
      src: configs/nginx_proxy.conf
      owner: www-data
      group: www-data

  - name: config
    copy:
      dest: /etc/nginx/nginx.conf
      src: configs/nginx.conf
      owner: www-data
      group: www-data

  - name: Restart1
    systemd: daemon_reload=yes state=restarted name=nginx

  - name: Password1
    command: "htpasswd -cb /etc/nginx/.smartvisu smarthome smarthome"
  - name: Password2
    command: "htpasswd -cb /etc/nginx/.alexa smarthome smarthome"
  - name: Password3
    command: "htpasswd -cb /etc/nginx/.shng smarthome smarthome"
  - name: Password4
    command: "htpasswd -cb /etc/nginx/.monit smarthome smarthome"

  - name: cert_conf
    copy:
      dest: /etc/nginx/conf.d/https.conf
      src: configs/nginx_https.conf
      owner: www-data
      group: www-data

  - name: letsencrypt_ini
    copy:
      dest: /etc/letsencrypt/cli.ini
      src: configs/letsencrypt_cli.ini

  - name: scriptdir
    file:
      path: /etc/nginx/scripts/
      state: directory
      mode: 0755
      group: www-data
      owner: www-data

  - name: luascript
    copy:
      dest: /etc/nginx/scripts/hass_access.lua
      src: configs/nginx_luascript
      owner: www-data
      group: www-data

  - name: Change ini
    replace:
      destfile: /etc/php/8.2/fpm/php.ini
      regexp: ";cgi.fix_pathinfo=1"
      replace: "cgi.fix_pathinfo=0"

  - name: Change log
    replace:
      destfile: /etc/php/8.2/fpm/php-fpm.conf
      regexp: "error_log = /var/log/php8.2-fpm.log"
      replace: "error_log = syslog"

  - name: logfile
    blockinfile:
      path: "/etc/rsyslog.d/php.conf"
      create: yes
      block: |
        $umask 0000
        template(name="FileFormat_timestamp" type="string" string= "%TIMESTAMP% %HOSTNAME% %syslogtag% %pri-text%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")
        if ($programname startswith 'php' or $msg contains ' php ') then {
          action(type="omfile" file="/var/log/php8.2-fpm.log" template="FileFormat_timestamp" FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
    ignore_errors: yes


  - name: Install lua-openssl
    command: "luarocks install openssl"


  - name: create phpinfo
    blockinfile:
      mode: 0644
      owner: www-data
      group: www-data
      create: yes
      path: /var/www/html/phpinfo.php
      block: |
        <?php
        // Show all information, defaults to INFO_ALL
        phpinfo();
        ?>

  - name: cgiparam
    lineinfile:
      path: /etc/nginx/fastcgi_params
      insertafter: '(.*)fastcgi_script_name;'
      line: 'fastcgi_param SCRIPT_FILENAME     $document_root$fastcgi_script_name;'

  - name: create favicons dir
    file:
      path: /var/www/html/favicons
      state: directory

  - name: Copy favicons
    unarchive:
      src: configs/favicons.tar
      dest: /var/www/html/favicons/
      owner: smarthome
      group: www-data
      mode: 0770

  - name: create nginx_systemd dir
    file:
      path: /etc/systemd/system/nginx.service.d/
      state: directory

  - name: Copy service_conf
    copy:
      src: configs/service_nginx_fix.conf
      dest: /etc/systemd/system/nginx.service.d/
      owner: smarthome
      group: smarthome
      mode: 0664

  - name: Copy dnsresolvers
    copy:
      src: executables/dnsresolvers.sh
      dest: /opt/
      owner: smarthome
      group: smarthome
      mode: 0777

  - name: logfile
    blockinfile:
      path: "/etc/rsyslog.d/nginx.conf"
      create: yes
      block: |
        template(name="FileFormat_timestamp_nginx" type="string" string= "%TIMESTAMP% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")
        $Template nginxerror,"%TIMESTAMP% %HOSTNAME% %syslogtag:R,ERE,1,BLANK:(.*)(\:)--end%[%msg:R,ERE,2,FIELD:([0-9]*#)([0-9]*)(.*)--end%]:%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[error\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:sp-if-no-1st-sp%%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[error\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:drop-last-lf%\n"
        $Template nginxalert,"%TIMESTAMP% %HOSTNAME% %syslogtag:R,ERE,1,BLANK:(.*)(\:)--end%[%msg:R,ERE,2,FIELD:([0-9]*#)([0-9]*)(.*)--end%]:%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[alert\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:sp-if-no-1st-sp%%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[alert\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:drop-last-lf%\n"
        $Template nginxcritical,"%TIMESTAMP% %HOSTNAME% %syslogtag:R,ERE,1,BLANK:(.*)(\:)--end%[%msg:R,ERE,2,FIELD:([0-9]*#)([0-9]*)(.*)--end%]:%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[crit\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:sp-if-no-1st-sp%%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[crit\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:drop-last-lf%\n"
        $Template nginxemergency,"%TIMESTAMP% %HOSTNAME% %syslogtag%%msg:R,ERE,2,FIELD:(nginx\:\s+)(.*)--end:sp-if-no-1st-sp%%msg:R,ERE,2,FIELD:(nginx\:\s+)(.*)--end:drop-last-lf%\n"
        $Template nginxwarn,"%TIMESTAMP% %HOSTNAME% %syslogtag:R,ERE,1,BLANK:(.*)(\:)--end%[%msg:R,ERE,2,FIELD:([0-9]*#)([0-9]*)(.*)--end%]:%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[warn\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:sp-if-no-1st-sp%%msg:R,ERE,3,BLANK:([0-9]{4}/[0-9]{2}/[0-9]{2}\s+[:0-9]{8}\s+\[warn\]\s+([0-9]*#[0-9]*\:\s)(.*))--end:drop-last-lf%\n"

        if $syslogfacility-text == 'local7' and $syslogseverity-text == 'alert' and $programname == 'nginx' and $msg contains 'alert' then {
          action(type="omfile" file="/var/log/nginx/error.log" template="nginxalert"  FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
        if $syslogfacility-text == 'local7' and $syslogseverity-text == 'warn' and $programname == 'nginx' and $msg contains 'warn' then {
          action(type="omfile" file="/var/log/nginx/error.log" template="nginxwarn"  FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
        if $syslogfacility-text == 'local7' and $syslogseverity-text == 'error' and $programname == 'nginx' and $msg contains 'error' then {
          action(type="omfile" file="/var/log/nginx/error.log" template="nginxerror"  FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
        if $syslogfacility-text == 'local7' and $syslogseverity-text == 'crit' and $programname == 'nginx' and $msg contains 'crit' then {
          action(type="omfile" file="/var/log/nginx/error.log" template="nginxcritical"  FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
        if ($programname == 'nginx' and $msg contains 'nginx.conf test failed') or ($syslogseverity-text > 'crit' and $programname == 'nginx' and $msg contains 'emerg') then {
          action(type="omfile" file="/var/log/nginx/error.log" template="nginxemergency"  FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
        if $programname == 'nginx' then {
          action(type="omfile" file="/var/log/nginx/access.log" template="FileFormat_timestamp_nginx"  FileCreateMode="0644" FileGroup="adm" FileOwner="www-data")
          stop
        }
  - name: Copy logrotate
    copy:
      src: configs/logrotate_nginx
      dest: /etc/logrotate.d/nginx
      mode: 0644

  - name: Copy certbot
    copy:
      src: configs/logrotate_certbot
      dest: /etc/logrotate.d/certbot
      mode: 0644

  - name: logrotate_php
    lineinfile:
      path: /etc/logrotate.d/php8.2-fpm
      regexp: 'compress'
      state: absent

  - name: create systemd dir
    file:
      path: /etc/systemd/system/php8.2-fpm.service.d/
      state: directory

  - name: Copy service_conf homebridge
    copy:
      src: configs/service_php_fix.conf
      dest: /etc/systemd/system/php8.2-fpm.service.d/
      owner: smarthome
      group: adm
      mode: 0644

  - name: Restart php
    systemd: daemon_reload=yes state=restarted name=php8.2-fpm.service

  - name: Restart nginx
    systemd: state=restarted name=nginx
