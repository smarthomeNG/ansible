---
- name: nodered
  hosts: image
  remote_user: root
  become_user: root
  become: true
  become_exe: sudo su

  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
  - name: Create Group
    group:
      name: smarthome
      state: present

  - name: Create User
    user:
      name: smarthome
      shell: /bin/bash
      groups: smarthome
      append: no
      update_password: always
      password: ""
      comment: 'SmarthomeNG User'

  - name: Groups
    user:
      name: smarthome
      shell: /bin/bash
      groups: www-data, sudo, i2c, adm, audio, video, plugdev, input, netdev, spi, gpio, dialout
      append: yes

  - name: check if nodered exists
    stat:
      path: /lib/systemd/system/nodered.service
    register: nodered_installed

  - name: download nodered script
    get_url:
      url: https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered
      dest: /home/smarthome
      mode: 775
    when: nodered_installed.stat.exists == False

  - name: install nodered
    shell: "/home/smarthome/update-nodejs-and-nodered --confirm-install --confirm-pi"
    become_user: smarthome
    become: true
    become_method: su
    async: 2500
    poll: 0
    when: nodered_installed.stat.exists == False
    register: nodered_installer

  - name: wait
    async_status: jid={{ nodered_installer.ansible_job_id }}
    register: job_result
    until: job_result.finished
    retries: 280
    become_user: smarthome
    become: true
    become_method: su
    when: nodered_installed.stat.exists == False

  - name: Copy service
    copy:
      src: configs/nodered.service
      dest: /lib/systemd/system/nodered.service
      owner: root
      group: root
      mode: 0644

  - name: Restart nodered service
    systemd: state=restarted name=nodered.service

  - name: pause
    pause:
      seconds: 15

  - name: httproot
    replace:
      destfile: /home/smarthome/.node-red/settings.js
      regexp: "//httpRoot: '/red',"
      replace: "httpRoot: '/nodered',"

  - name: Restart nodered service
    systemd: state=restarted name=nodered.service
