set daemon 90
   with start delay 90

set logfile syslog
set mailserver
    localhost
    PORT 25
    with timeout 15 seconds

set mail-format {      from: Monit SmarthomeNG <monit@localhost> }

set alert monit@localhost only on { timeout }
set httpd port 2812 and
allow 10.0.0.0/8
allow localhost

check file mainlog with path /var/log/exim4/mainlog
  restart program = "/usr/bin/sudo /usr/sbin/exim -bp | /usr/bin/sudo /usr/sbin/exiqgrep -i | xargs exim -Mrm && /usr/bin/sudo /usr/sbin/exim_tidydb -t 1d /var/spool/exim retry > /dev/null && /usr/bin/sudo rm -rf /var/spool/exim/db/retry*"
  if match "Message is frozen" then restart

# Avahi daemon
 check process avahi with pidfile /run/avahi-daemon/pid
   group system
   start program = "/bin/systemctl start avahi-daemon"
   stop  program = "/bin/systemctl stop avahi-daemon"
   restart  program = "/bin/systemctl restart avahi-daemon"
   if failed host 127.0.0.1 port 5353 type udp then restart
   if 5 restarts within 5 cycles then timeout
   depends on avahi_bin

 check file avahi_bin with path /usr/sbin/avahi-daemon
   group system
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

#CRON
check process cron with pidfile /run/crond.pid
   group system
   depends on cron_rc
   start program = "/bin/systemctl start cron"
   stop  program = "/bin/systemctl stop cron"
   restart program = "/bin/systemctl restart cron"
   if 10 restarts within 15 cycles then unmonitor
   depends on cron_bin
   depends on cron_rc

 check file cron_bin with path /usr/sbin/cron
   group system
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

 check file cron_rc with path /etc/init.d/cron
   group system
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor


#UDEV
check process udev matching "systemd-udevd"
 start program = "/bin/systemctl start udev"
 stop program = "/bin/systemctl stop udev"
 restart program = "/bin/systemctl restart udev"
 if 20 restarts within 45 cycles then unmonitor

#KNXD
check process knxd matching "knxd"
 start program = "/bin/systemctl start knxd"
 stop program = "/bin/systemctl stop knxd"
 restart program = "/bin/systemctl restart knxd"
 if 20 restarts within 45 cycles then unmonitor

#WWW
check process nginx with pidfile /run/nginx.pid
 start program = "/bin/systemctl start nginx"
 stop program = "/bin/systemctl stop nginx"
 restart program = "/bin/systemctl restart nginx"
 if failed host 127.0.0.1 port 80 protocol http
 and request "/token" with timeout 10 seconds then restart
 if 15 restarts within 25 cycles then unmonitor

#PHP
check process php-fpm with pidfile /run/php/php8.2-fpm.pid
  start program = "/bin/systemctl start php8.2-fpm"
  stop program = "/bin/systemctl stop php8.2-fpm"
  restart program = "/bin/systemctl restart php8.2-fpm"
  if failed unixsocket /run/php/php8.2-fpm.sock then restart
  if 15 restarts within 25 cycles then unmonitor

#SMARTHOME
check process smarthome with pidfile /usr/local/smarthome/var/run/smarthome.pid
 start program = "/bin/systemctl start smarthome"
 stop program = "/bin/systemctl stop smarthome"
 restart program = "/bin/systemctl restart smarthome"
 if failed host 127.0.0.1 port 2323 type tcp for 45 cycles then alert
 if cpu > 35% for 50 cycles then alert
 if 20 restarts within 45 cycles then unmonitor

#SSH
check process sshd with pidfile /run/sshd.pid
  start program = "/bin/systemctl start ssh"
  stop program = "/bin/systemctl stop ssh"
  restart program = "/bin/systemctl restart ssh"
  if failed port 22 protocol ssh then restart
  if 10 restarts within 15 cycles then unmonitor

# SAMBA
 check process smbd with pidfile /run/samba/smbd.pid
   group samba
   start program = "/bin/systemctl start smbd"
   stop program = "/bin/systemctl stop smbd"
   #if failed host 127.0.0.1 port 139 type tcp then restart
   if 5 restarts within 5 cycles then timeout
   depends on smbd_bin

 check process nmbd with pidfile /run/samba/nmbd.pid
   group samba
   start program = "/bin/systemctl start nmbd"
   stop  program = "/bin/systemctl stop nmbd"
   #if failed host 127.0.0.1 port 138 type udp then restart
   #if failed host 127.0.0.1 port 137 type udp then restart
   if 5 restarts within 5 cycles then timeout
   depends on nmbd_bin

 check file nmbd_bin with path /usr/sbin/nmbd
   group samba
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

 check file smbd_bin with path /usr/sbin/smbd
   group samba
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

##LIRC
#check process lirc with pidfile /run/lirc/lircd.pid
# not every "0-5 0 * * *"
# start program = "/bin/systemctl start lircd"
# stop program = "/bin/systemctl stop lircd"
# restart program = "/bin/systemctl restart lircd"
# if 20 restarts within 45 cycles then unmonitor

##WATCHDOG
#check process watchdog with pidfile /run/watchdog.pid
# start program = "/bin/systemctl start watchdog"
# stop program = "/bin/systemctl start watchdog"
# restart program = "/bin/systemctl restart watchdog"
# if 20 restarts within 45 cycles then unmonitor

##EXIM
#check process exim4 with pidfile /run/exim4/exim.pid
#   group exim
#   start program = "/bin/systemctl start exim4"
#   stop program = "/bin/systemctl stop exim4"
#   restart program = "/bin/systemctl restart exim4"
#   if 20 restarts within 50 cycles then unmonitor
#   depends on exim_init

# check file exim_init with path /etc/init.d/exim4
#   group exim
#   if failed checksum then unmonitor
#   if failed permission 755 then unmonitor
#   if failed uid root then unmonitor
#   if failed gid root then unmonitor

##SUSV
#check process susvd with pidfile /run/susvd.pid
#start program = "/bin/systemctl start susvd"
#stop program = "/bin/systemctl stop susvd"
#restart program = "/bin/systemctl restart susvd"
# if 10 restarts within 15 cycles then unmonitor

##RADIUS
#check process freeradius with pidfile /run/freeradius/freeradius.pid
# not every "0-5 0 * * *"
# start program = "/bin/systemctl start freeradius"
# stop program = "/bin/systemctl stop freeradius"
# restart program = "/bin/systemctl restart freeradius"
# if failed host 127.0.0.1 port 1812 type udp protocol radius secret "SECRET" then alert
# if 15 restarts within 25 cycles then unmonitor

##NFS
#check process NFS matching "nfsd"
#  start program = "/bin/systemctl start nfs-kernel-server"
#  stop program = "/bin/systemctl stop nfs-kernel-server"
#	 restart program = "/bin/systemctl restart nfs-kernel-server"
#  if failed host 127.0.0.1 port 2049 type tcp for 2 cycles then restart
#  if 10 restarts within 15 cycles then unmonitor

##HOMEBRIDGE
#check process homebridge matching "homebridge"
#  start program = "/bin/systemctl start homebridge"
#  stop program = "/bin/systemctl stop homebridge"
#  restart program = "/bin/systemctl restart homebridge"
#  if 20 restarts within 45 cycles then timeout

##INFLUXDB
#check process influxdb matching "influxd"
#  start program = "/bin/systemctl start influxdb"
#  stop program = "/bin/systemctl stop influxdb"
#  restart program = "/bin/systemctl restart influxdb"
#  if 20 restarts within 45 cycles then timeout

##MOSQUITTO
#check process mosquitto matching "mosquitto"
#  start program = "/bin/systemctl start mosquitto"
#  stop program = "/bin/systemctl stop mosquitto"
#  restart program = "/bin/systemctl restart mosquitto"
#  if 20 restarts within 45 cycles then timeout

#MYSQL
#check process mariadb with pidfile /run/mysqld/mysqld.pid
#    start program = "/bin/systemctl start mariadb" with timeout 60 seconds
#    stop program = "/bin/systemctl stop mariadb"
#    restart program = "/bin/systemctl restart mariadb"
#    if failed unixsocket /run/mysqld/mysqld.sock then restart
#    if 10 restarts within 15 cycles then timeout

##GRAFANA
#check process grafana-server with pidfile /run/grafana/grafana-server.pid
#  start program = "/bin/systemctl start grafana-server"
#  stop program = "/bin/systemctl stop grafana-server"
#  restart program = "/bin/systemctl restart grafana-server"
#  if 20 restarts within 45 cycles then timeout

##LOKI
#check process loki matching "loki-linux-arm"
#  start program = "/bin/systemctl start loki"
#  stop program = "/bin/systemctl stop loki"
#  restart program = "/bin/systemctl restart loki"
#  if 5 restarts within 5 cycles then timeout

##PROMTAIL
#check process promtail matching "promtail-linux-arm"
#  start program = "/bin/systemctl start promtail"
#  stop program = "/bin/systemctl stop promtail"
#  restart program = "/bin/systemctl restart promtail"
#  if 5 restarts within 5 cycles then timeout

##OPENVPN
#check process openvpn with pidfile /run/openvpn/server.pid
#  not every "0 0 * * *"
#  start program = "/bin/systemctl start openvpn@server" with timeout 60 seconds
#  stop program = "/bin/systemctl stop openvpn@server"
#  restart program = "/bin/systemctl restart openvpn@server"
#  if failed host 127.0.0.1 port 11395 type udp with timeout 15 seconds for 5 cycles then restart
#  if 10 restarts within 15 cycles then unmonitor

#System
check system localhost
 group system
 if loadavg (1min) > 40 then alert
 if loadavg (5min) > 50 then alert
 if memory usage > 75% then alert
 if swap usage > 35% then alert
 if cpu usage (user) > 85% then alert
 if cpu usage (system) > 75% then alert
 if cpu usage (wait) > 75% then alert
